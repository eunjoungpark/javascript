1. 정규식
    new RegExp() : 정규식 인스턴스 생성
    exec() : 정규식 내에 문자가 존재할 경우 해당 반환
    test() : 정규식 문자를 true or false 반환

2. Element 관련
    document.createElement(element) : 엘리먼트 생성
    document.createTextNode(text) : 텍스트 노드 생성
    element.appendChild(child element) : 하위요소를 상위요소에 추가
    document.querySelector(selector) : selector에 부합하는 요소 반환.
    document.querySelectorAll(selectors) : selectors에 부합하는 모든 요소 반환. (배열)
    element.setAttribute(key, value) : 요소에 속성추가
    element.getAttribute(key) : 요소의 속성값을 반환.
    element.removeAttribute(key) : 요소의 속성값을 삭제.
    element.nextElementSibling : 이웃하는 다음 요소 반환.
    element.previousElementSibling : 이웃하는 이전 요소 반환.
    element.offsetParent : offset 된 부모를 반환(body).
    element.getBoundingClientRect().width : 분수값이 필요한 경우
    element.ClientWidth : 정수값으로 반올림함.
    element.parentElement : 바로 상위(부모) node를 반환.

3. 배열
    forEach : 배열의 모든 순서를 돔.
    [].forEach.call(_contEls, callback function(item, index ...)) : 유사배열을 forEach으로 사용할 경우


4. Object
    Object.keys : 오브젝트의 모든 속성(키)값을 배열로 반환.


면접질문 
=>=> vue
- 자바스크립트 프레임웍을 장점
Vue, React, Angular 등의 자바스크립트 프레임웍은 SPA(Single Page Application) 단위의 화면을 제작할 수 있게 해준다.
즉, SPA의 장점을 소개하는 것이 그 이유가 될 수 있는데, 개발자 입장에서 서버사이드 렌더링에 비해 배포가 간단하고,
처음 페이지 호출 시, 정적리소스들을 최초 한번만 다운로드하며, 유저에게 네이티브앱과 유사한 사용경험을 제공한다.
이후 페이지 요청시, 필요한 데이터만 요청하여 전체페이지를 다시 렌더링 하지 않아 트래픽 감소와 빠른 속도 및 반응성으로 
사용자 UX향상시킬 수 있다.

- 자바스크립트 프레임웍의 단점
초기 구동 속도가 느릴 수있지만, 여러가지 장점을 고려했을때 결정적인 단점으로 생각할수 없으며, 프로젝트의 규모가 커질때는
lazyload 사용으로 벤더 js를 사이즈를 줄이는 방법등 해결방안들이 있습니다.

- vue의 생명주기
초기에 vue생성자가 생성되고, 이벤트와 라이프사이클이 초기화 된다.
beforeCreate, created, beforeMount, mounted, beforeUpdate, updated, beforeDestroy, destoryed

- computed와 watch, methods의 차이점
methods 호출시 전체 계산을 다시하는 방식이며, computed는 값의 변경이 발생했을 때만, 호출되고 동일한 값일 경우
기존에 계산되었던 값을 이용한다.
watch는 data속성을 추적하는 방식으로 데이터 속성의 변경사항으로 실시간으로 추적할 수 있다.

- vuex, vue-loader, router가 각각 무엇인가
vuex는 상태관리를 하는 라이브러리로 data의 흐름을 관리해주면, 중대형 프로젝트에 사용하면 더욱 유용하다.
여러 중첩된 컴포넌트를 사용할 경우, prop정의가 장황해질 수 있는 단점과 형제컴포넌트 끼리의 prop사용에 제한되어
오는 데이터 이동 흐름은 유지보수가 어렵기 때문에 중앙집중식 저장소 방식의 vuex사용이 해결방법이 될수 있다.

vue-loader는 실제 webpack loader를 인데, .vue파일을 해석할수 있게 해주며, vue 개발환경인 
template, script, style 각 영역을 해석해주고 css의 스코프처리가 가능하게 해준다.
마지막으로 핫리로딩 기능을 사용할수 있게 하는 로더이다.

router는 단일 페이지 애플리케이션에서 다른 페이지로 이동할 수 있는 맵과 같은 것으로 
중첩된 컴포넌트의 링크와 뷰를 제공하며, 파라미터 및 쿼리를 제공한다.
또, 트렌지션 효과, active css처리 HTML5의 히스토리 및 해시모드 등을 제공한다.


- 가상돔에 대한 개념.
가상돔은 React에서 가져온 개념으로 실제 DOM과 꼭 같은 것은 아니며, Vue 컴포넌트 트리로 생성된 VNode이다.
이렇게 생성된 가상돔을 실제 DOM에 붙이는 방식으로, 변경이 있는 DOM을 그려내는데 성능부하를 최소화 하기 위한 방식.

- vue-lazy loader
webpack으로 코드를 분할하는 방식으로, 컴포넌트 단위로 분할해서, 로드속도를 향상시키는 방식이다.

- vue에서의 SEO문제
Nuxt.js나 prerender 또는 vue-server-render 사용

- vue와 react, angular의 차이점.
- webpack(Browserify)과 grunt, gulp의 차이

=>=> 개발관련
- Restful API란? (https://meetup.toast.com/posts/92)
URI로 자원의 정보를 표현한 것으로, 그 URI가 표현하는 것은 하나의 자원을 표현하는 것이고, URI가 변경된 것은 자원의 정보도 
변경된 것을 의미한다. 자원은 POST, GET, PUT, DELETE로 조작할 수 있으며 좋은 Restful API이란 잘 설계된 URI와 
응답상태코드라 말할 수 있다.

URI 설계시 유의사항
1. URI는 동사가 아닌 명사로 표현한다.
2. / 는 계층을 표현할 때 사용하고 마지막에는 표시하지 않는다.
3. URI를 표현할 때는 대문자보다 소문자를 사용한다.
4. 긴문자로 불가피하게 어더바를 사용할 경우에는 하이픈을 권장한다.
5. 파일의 확장자를 리소스에 포함하지 않는다.

응답코드
200 : 클라이언트 요청을 정상적으로 처리할 때
201 : POST조작으로 정상적으로 리소스를 생성했을 때

400 : 클라이언트 요청이 부적절할 때
401 : 인증을 하지 않고 인증된 요청을 하려고 할때
405 : 클라이언트 리소스로는 사용할 수없는 METHOD처리를 요청했을때

301 : 클라이언트가 요청한 리소스가 변경되었을 때
500 : 서버가 문제가 있을 경우

기타(리소스 관계 표현법)
1. URI를 단수형뿐 아니라 복수형으로 선언할 수 있다.
2. 계층의 관계를 표현할 때 형용사를 사용할 수 있다.


=>=> JAVASCRIPT
- 객제지향(https://jeong-pro.tistory.com/95)
    - 실제 세계를 모델링하여 만들어진 것으로, 각각의 속성들의 만들어지는 순서가 필요없고, 따로 독립적으로 개발되어 한 곳에 모여짐.
    - 대형프로젝트에 적합.
    - 특성
        1. 클래스 + 인스턴스 (객체)
        2. 추상화
        3. 캡슐화
        4. 다형성
        5. 상속
    - 장점
        1. 코드 재사용이 용이 (클래스 상송 및 확장하여 사용할 수 있음.)
        2. 디버깅이 쉬움
        3. 신뢰성있는 소프트웨어 쉽게 제작
        4. 업그레이드가 쉬움.
    - 단점
        1. 절차지향 방법보다 규모가 커지고 느려질 수 있음.
        2. 설계시 시간과 노력이 필요.

- 절차 지향
    - 어느 한 곳을 기점으로 순서대로 만들어 나가야 하는 방식. 만들어진 속성들을 분리되면 안되고 순서가 틀어지면 안되며, 고장이 나면 전체 기능이 마비됨. 
    다른 부품을 대체할 수도 없음.
    - 객체지향적인 방법보다 소요시간이 줄어 유리함.
    - 간단하고, 작은 단위의 작업에 적합.
    
- apply, call, bind의 차이설명.
apply와 call은 본질적으로 같으나, 인수부분이 배열객체와 ','로 구분한 값이라는 것이 다름.
apply : this와 인수를 사용하여 함수를 호출함. 인수는 배열객체 Say.apply(this, ["hello", "world!"])
call : this와 인수를 사용하여 함수를 호출함. 인수는 ','로 구분한 값 Say.call(this, "hello", "world!")
bind : this와 인수를 적용한 새로운 함수를 반환.

- 유사배열과 배열의 차이
유사배열은 배열과 생김새가 비슷하지만, 실제로 배열에서 제공하는 메소드들을 사용할수 없다.
유사배열은 arguments객체나 document.querySelector로 반환되는 NodeList객체이다.
배열은 0이상의 정수 값을 프로퍼티 값으로 갖고,
length 프로퍼티의 값을 변경하면 배열의 길이가 줄어든다.
instanceof 연산자로 평가할 경우, Array가 출력된다.
만약, 유사배열을 배열의 메소드를 이용하고 싶다면, Array.prototype.apply나 call을
이용하여 사용하거나 es6에서 제공하는 from메소드들 이용하면 사용할수 있다.

- closure란
메모리를 가지고 호출하는 함수, 클로저 함수가 자신이 생성됐을 때, 동일 범위에 존재하던 변수를 사용할 수 있는다는 의미.
클로저가 생성되는 경우 (주의 : 외부함수 실행이 종료되어야, 내부함수가 호출됨)
- 하나의 함수가 다른 함수 내에서 정의될때
- 내부 함수가 외부 함수에 존재한느 변수를 참조할 때
- 외부 함수의 실행이 정지된 후 내부 함수가 호출될 때 

- ES6문법 아는대로...
    - Symbol 데이터 타입(자기 자신을 제외한 그 어떤 값과도 다른 유일무이한 값)
    - Object.is
    - Object.assign
    - 스프레드 오퍼레이터
    - 구문분할기법(디스트럭처링)
    - import & export
    - const & let
    - arrow function
    - 향상된 객체 리터럴
    - 템플릿 러터럴 (백틱)
    - for-of
    - Array.from
- throttle와 debounce의 차이
- Object.defineProperty 이 무엇인가
- map, filter, reduce, forEach차이
 map은 배열의 수식을 적용하여 결과값을 모아 새배열을 생성하여 반환.
 filter는 수식에 해당하는 값만 모아 새배열을 생성하여 반환.
 reduce는 배열을 돌며 누적된 하나의 값을 반환.
 forEach는 배열에서 사용가능한 메소드로 순환하여 수식을 처리하는 것으로 값을 모아 새배열을 생성하는 map과는 다름.

- use strick 가 무엇인가
ES5에 추가된 것으로, 자바스크립트의 코드와 동작을 엄격하게 강제할수 있다.
특징으로는,
- 잠재적인 문제가 있는 코드에대해 에러를 발생시킨다.
- 보안과 성능이 향상된다.
- 향후 표준에서 제외될 코드에 대해 경고를 표시한다.


- for-in과 for-of차이 (https://jsdev.kr/t/for-in-vs-for-of/2938)
for-in은 객체를 반복하는 것으로 모든 객체에 사용 가능한다. for in은 배열을 순회하여 수식을 처리하는데, 열거할수 있는 모든 속성에 반복한다. 부모배열이 가지고 있는 값을 출력해, 신뢰성이 떨어진다.
반해 for-of는 ES6에 추가된 방식으로 Symbol.iterator 속성을 가지는 컬렌션 전용으로, 부모의 배열값과 상관없이 해당 배열만 참조하므로 데이터의 신뢰성을 얻을 수 있다.

- Promise (async, await)
  https://www.zerocho.com/category/ECMAScript/post/58d142d8e6cda10018195f5a
callback은 비동기적으로 어떤처리 이후에 처리하고 싶은 작업을 수행하는 함수를 호출하는 것을 말하는데, callback이 중첩으로 호출되어 가독성이 떨어지는 것을 콜백헬이라고 한다.
이것을 해결하기 위해, 나온 것이 Promise이다.
Promise를 사용하면 가독성이 좋고 처리순서를 보장할 수 있으며, 결과 값을 성공또 는 실패, 오류사항에 대한 후속작업을 가능하게 한다.
그런데, Promise를 사용하면서 실행순서와 복잡성이 발생하여 이것을 개선할 필요가 있어 나온 것이 async와 await이다.
async와 await는 직관적이면 간편해졌고 await문으로 실행을 지연하는 기능도 생겼다.


- iterator란 (https://jaeyeophan.github.io/2017/04/21/ES6-9-Iterator/)
순회가능한 객체의 시퀀스를 정의 하는 방법으로, 대표적으로 Array 객체를 들을 수 있다.
Array객체와 String객체, TypedArray, Map, Set 에는 Syymbole.iterator가 들어있어 next()함수로 순회할 수 있다.


- class문법

=>=> HTML
DOM과 CSSOM이란?
HTML5란? (https://webclub.tistory.com/491)
HTML5는 가장 최근에 제정된 버전으로, 주요기능들이 추가되면서 웹어플리케이션 언어로 발전되었습니다.

HTML5주요기능
시멘틱 요소 추가,
멀티미디어(비디오&오디오),
canvas,
localStorage,

DOCTYPE이란?
DOCUMENT TYPE의 약자로, HTML을 어떻게 구성할 것인지 정하는 기준이다.
HTML은 과거에 사용되던 비표준 언어와, 현재까지의 표준 언어들이 있는데, HTML에 포함하고 있는 비표준을 어디까지 허용할 것인지
규약이 정해져있고, 유저 에이전트에게 어떻게 해석할 것인지를 알려주며, DOCTYPE이 없을 경우 quick mode로 해석한다.

==> 참고하는 사이트
- TOAST meetup
- NTS 블로그
- Naver D2
- velog
- 구글링
- stackoverflow
- https://medium.com/
- https://www.zerocho.com/

Postman
개발하 API를 테스트하고, 테스트 결과를 공유하여 API생산성을 높여주는 플랫폼.

괜찮은 사이트 
http://es6-features.org/#PromiseUsage
https://www.tutorialspoint.com/jquery/jquery-effects.htm
https://www.tutorialspoint.com/es6/es6_animation.htm
https://meetup.toast.com/?page=7
https://d2.naver.com/helloworld/59361
https://www.html5rocks.com/en/features/storage
https://github.com/philipwalton/flexbugs (flexbox로 레이아웃 잡기)
https://github.com/gnarf/jquery-requestAnimationFrame
(관련 http://www.gisdeveloper.co.kr/?p=2237)
https://jsdev.kr/





